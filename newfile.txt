
Action: file_editor str_replace /app/backend/server.py --old-str "# Translation endpoint
@api_router.post(\"/translate\")
async def translate_text_endpoint(request: dict):
    \"\"\"Translate text using GPT-5\"\"\"
    try:
        text = request.get('text', '')
        source_language = request.get('source_language', 'en')
        target_language = request.get('target_language', 'th')
        
        if not text.strip():
            raise HTTPException(status_code=400, detail=\"Text is required\")
        
        # Language name mapping
        language_names = {
            'en': 'English',
            'th': 'Thai', 
            'zh': 'Chinese'
        }
        
        source_name = language_names.get(source_language, source_language)
        target_name = language_names.get(target_language, target_language)
        
        # Use GPT-5 for translation
        chat = LlmChat(
            api_key=EMERGENT_LLM_KEY,
            session_id=f\"translate-{uuid.uuid4()}\",
            system_message=f\"You are a professional translator. Translate the given text from {source_name} to {target_name}. Only return the translation, nothing else. Keep the tone and meaning accurate.\"
        ).with_model(\"openai\", \"gpt-5\")
        
        user_message = UserMessage(text=f\"Translate to {target_name}: {text}\")
        translated_text = await chat.send_message(user_message)
        
        return {
            \"original_text\": text,
            \"translated_text\": str(translated_text),
            \"source_language\": source_language,
            \"target_language\": target_language
        }
        
    except Exception as e:
        logging.error(f\"Translation error: {e}\")
        # Return fallback translation on error
        return {
            \"original_text\": text,
            \"translated_text\": f\"[Translation Error] {text}\",
            \"source_language\": source_language,
            \"target_language\": target_language
        }" --new-str "# Health check
@api_router.get(\"/health\")
async def health_check():
    return {\"status\": \"healthy\", \"timestamp\": datetime.utcnow()}

# Translation endpoint
@api_router.post(\"/translate\")
async def translate_text_endpoint(request: dict):
    \"\"\"Translate text using GPT-5\"\"\"
    try:
        text = request.get('text', '')
        source_language = request.get('source_language', 'en')
        target_language = request.get('target_language', 'th')
        
        if not text.strip():
            raise HTTPException(status_code=400, detail=\"Text is required\")
        
        # Language name mapping
        language_names = {
            'en': 'English',
            'th': 'Thai', 
            'zh': 'Chinese'
        }
        
        source_name = language_names.get(source_language, source_language)
        target_name = language_names.get(target_language, target_language)
        
        # Use GPT-5 for translation
        chat = LlmChat(
            api_key=EMERGENT_LLM_KEY,
            session_id=f\"translate-{uuid.uuid4()}\",
            system_message=f\"You are a professional translator. Translate the given text from {source_name} to {target_name}. Only return the translation, nothing else. Keep the tone and meaning accurate.\"
        ).with_model(\"openai\", \"gpt-5\")
        
        user_message = UserMessage(text=f\"Translate to {target_name}: {text}\")
        translated_text = await chat.send_message(user_message)
        
        return {
            \"original_text\": text,
            \"translated_text\": str(translated_text),
            \"source_language\": source_language,
            \"target_language\": target_language
        }
        
    except Exception as e:
        logging.error(f\"Translation error: {e}\")
        # Return fallback translation on error
        return {
            \"original_text\": text,
            \"translated_text\": f\"[Translation Error] {text}\",
            \"source_language\": source_language,
            \"target_language\": target_language
        }"
Observation: Edit was successful.